define(['module','underscore','jsComponentUtils'],function(module,_,jsComponentUtils){'use strict';let LOG_LEVELS,LOG_LEVELS_MAP;LOG_LEVELS={DEBUG:1,INFO:2,WARN:3,ERROR:4};LOG_LEVELS_MAP=_.invert(LOG_LEVELS);let consoleLogger={debug:function(message){this.log(LOG_LEVELS.DEBUG,message,arguments);},info:function(message){this.log(LOG_LEVELS.INFO,message,arguments);},warn:function(message){this.log(LOG_LEVELS.WARN,message,arguments);},error:function(message){this.log(LOG_LEVELS.ERROR,message,arguments);},log:function(level,message,data){let logData=_.toArray(data),originalLevel=level;logData.shift();while(this.enabled&&this.log_level<=level){let logMethod=_.isString(LOG_LEVELS_MAP[level])?LOG_LEVELS_MAP[level].toLowerCase():'';if(!_.isObject(window['console'])||!_.isFunction(window.console[logMethod])){continue;}
if(logData.length){console[logMethod](this.getPrefix(originalLevel),message,logData);}else{console[logMethod](this.getPrefix(originalLevel),message);}
level--;}},getPrefix:function(level){let titles=[];titles.push(LOG_LEVELS_MAP[level]);if(_.isString(this.title)){titles.push(this.title);}else if(_.isArray(this.title)){titles=this.title;}else if(_.isObject(this.title)){_(this.title).each(function(elem){titles.push(elem);});}
return'['+titles.join('][')+']:';}};return jsComponentUtils.resolveReturn(consoleLogger,module.config());});