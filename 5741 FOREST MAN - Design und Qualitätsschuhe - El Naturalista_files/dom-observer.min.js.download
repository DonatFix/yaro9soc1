define(['module','jquery','underscore','mage/apply/main','mageUtils','jsComponentUtils','MutationObserver'],function(module,$,_,mage,utils,jsComponentUtils){'use strict';return jsComponentUtils.resolveReturn({initialize:function(config){_.extend(this,config);$(()=>{this.initBindings();let domObserver=new MutationObserver(mutations=>this.updateBindings(mutations));domObserver.observe(document.body,{subtree:true,childList:true});});},initBindings:function(){for(let componentName in this.components){let componentDefinition=this.components[componentName],dataFlagName=this.getDataFlagName(componentName);for(let component in componentDefinition){$(this.getHtmlSelector(componentDefinition[component],dataFlagName)).get().forEach(node=>this.tryForNode(node,componentName,component,componentDefinition[component]));}}},updateBindings:function(mutations){mutations.forEach(mutation=>{let node=mutation.target;for(let componentName in this.components){let componentDefinition=this.components[componentName];for(let component in componentDefinition){this.tryForNode(node,componentName,component,componentDefinition[component]);}}});},tryForNode:function(node,componentName,component,componentConfig){if(jsComponentUtils.isHtmlSelectorAll(componentConfig)){return;}
let dataFlagName=this.getDataFlagName(componentName);if(!$(node).is(this.getHtmlSelector(componentConfig,dataFlagName))){return;}
$(node).attr(dataFlagName,'1');mage.applyFor(node,componentConfig,component);},getDataFlagName:function(componentName){return`data-js-component-applied-${componentName.toLowerCase().replace(/[^a-z0-9]/gi, '-')}`;},getHtmlSelector:function(componentConfig,dataFlagName){return`${utils.nested(componentConfig, 'jsComponentInfo.htmlSelector')}:not([${dataFlagName}]`;}},module.config());});